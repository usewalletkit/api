# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml
  addresses: addresses.yml
  tokens: tokens.yml
  nfts: nfts.yml

service:
  auth: true
  base-path: /transactions
  endpoints:
    get-status:
      path: /status-by-hash
      method: GET
      docs: Retrieves the status of a transaction by its hash.
      display-name: Transaction Status By Hash
      request:
        name: GetTransactionStatusByHashRequest
        query-parameters:
          network: commons.Network
          transaction_hash: string
      response: GetTransactionStatusByHashResponse

    sign-and-send:
      path: /sign-and-send
      method: POST
      auth: true
      docs: This endpoint allows arbitrary smart contract function calls. It can be used to interact with smart contracts that are not supported by the Token/NFT APIs.
      display-name: Sign and Send
      request:
        name: SignAndSendRequest
        body:
          properties:
            network: commons.Network
            signer_wallet_address:
              type: string
              docs: address can only be the ones created in the project.
            unsigned_transaction:
              type: UnsignedTransaction
              docs: input of a transaction to be signed.
            developer_secret: optional<commons.DeveloperSecret>
            user_pin: optional<commons.UserPin>
      response: commons.TransactionSubmissionResponse

    sign:
      path: /sign
      method: POST
      auth: true
      docs: Signs a transaction without sending it to the blockchain.
      display-name: Sign
      request:
        name: SignRequest
        body:
          properties:
            network: commons.Network
            signer_wallet_address:
              type: string
              docs: address can only be the ones created in the project.
            unsigned_transaction:
              type: UnsignedTransaction
              docs: input of a transaction to be signed.
            developer_secret: optional<commons.DeveloperSecret>
            user_pin: optional<commons.UserPin>
      response: 
        type: string
        docs: signed transaction. This is the raw transaction that can be sent to 
          the rpc node. e.g. input to eth_sendrawtransaction

    batch-sign-and-send:
      path: /batch-sign-and-send
      method: POST
      auth: true
      docs: This endpoint makes arbitrary smart contract function calls in batch.
      display-name: Batch Sign and Send
      request:
        name: BatchSignAndSendRequest
        body:
          properties:
            network: commons.Network
            signer_wallet_address:
              type: string
              docs: address can only be the ones created in the project.
            unsigned_transactions:
              type: list<UnsignedTransaction>
              docs: list of transaction input to be signed.
            developer_secret: optional<commons.DeveloperSecret>
            user_pin: optional<commons.UserPin>
      response: commons.TransactionSubmissionResponse

    sign-message:
      path: /sign-message
      method: POST
      auth: true
      docs: This endpoint calculates a network-specific signature (e.g. in EIP-191 format EVM networks) for the provided message.
      display-name: Sign Message
      request:
        name: SignMessageRequest
        body:
          properties:
            network: commons.Network
            message_type:
              type: optional<SignMessageMessageType>
              docs: type of message to be signed. defaults to string.
            signer_wallet_address:
              type: string
              docs: address can only be the ones created in the project.
            message:
              type: string
              docs: message to be signed.
            developer_secret: optional<commons.DeveloperSecret>
            user_pin: optional<commons.UserPin>

      response: SignMessageResponse

    status-by-id:
      path: /status-by-id
      method: GET
      auth: true
      docs: Retrieves the status of a transaction by its id returned from the APIs that change the state of blockchain` (e.g. /tokens/transfer)`
      display-name: Transaction Status by ID
      request:
        name: GetTransactionStatusByIdRequest
        query-parameters:
          id:
            docs: >-
              transaction id returned in POST requests that result in a
              transaction. e.g. Transfer Token
            type: optional<string>
      response: GetTransactionStatusByIdResponse

    preview:
      path: /preview
      method: POST
      auth: true
      docs: This endpoint allows you to preview a transactionâ€™s execution without sending it to the blockchain.
      display-name: Preview
      request:
        name: PreviewRequest
        body:
          properties:
            network: commons.Network
            from:
              type: string
              docs: sender of the transaction.
            unsigned_transaction:
              type: UnsignedTransaction
              docs: transaction to preview.
      response: PreviewResponse

    preview-bundle:
      path: /preview-bundle
      method: POST
      auth: true
      docs: This endpoint allows you to preview a bundle of transactions as it would execute on chain and returns results for each transaction.
      display-name: Preview Bundle
      request:
        name: PreviewBundleRequest
        body:
          properties:
            network: commons.Network
            from:
              type: string
              docs: sender of the transaction.
            unsigned_transactions:
              type: list<UnsignedTransaction>
              docs: a bundle of transactions to preview.
      response: list<PreviewResponse>

types:
  SignMessageMessageType:
    enum:
      - string
      - bytes

  GetTransactionStatusByHashResponse:
    properties:
      transaction_hash:
        type: string
      network: commons.Network
      status:
        type: string
      contract_address:
        docs: >-
          If the transaction is a contract creation, this field will be populated with the contract address.
        type: optional<string>

  GetTransactionStatusByIdResponse:
    properties:
      transaction_id:
        type: string
      transaction_hash:
        docs: >-
          If the transaction has been sent to the blockchain (status = pending/success/failed), this field will be populated with the transaction hash.
        type: optional<string>
      network: commons.Network
      status:
        type: string
      contract_address:
        docs: >-
          If the transaction is a contract creation, this field will be populated with the contract address.
        type: optional<string>

  UnsignedTransaction:
    docs: input of a transaction.
    properties:
      to:
        docs: >-
          smart contract address or external owned account address to interact
          with
        type: string
      value:
        docs: >-
          optional. amount of native token to be transferred to the to address
          in this transactio in hex-encoded with 0x prefix.
        type: optional<string>
      input:
        docs: >-
          If it's a smart contract interaction, the hex-encoded calldata of the smart
          contract function. (ABI-encoded function with arguments)
        type: optional<string>
      gasLimit:
        docs: >-
          optional. hex-encoded with 0x prefix. maximum amount unit of gas to be used in this transaction. If provided, 
          it will override the gas limit estimated by eth_estimateGas.
        type: optional<string>
      maxPriorityFeePerGas:
        docs: >-
          optional. hex-encoded with 0x prefix. If provided, it will override the gas tip estimated by eth_maxPriorityFeePerGas.
        type: optional<string>
      maxFeePerGas:
        docs: >-
          optional. hex-encoded with 0x prefix. maximum amount of native token to be paid per unit of gas in this transaction. 
          If provided, it will override the gas fee cap estimated by WalletKit.
        type: optional<string>
      nonce:
        docs: >-
          optional. hex-encoded with 0x prefix. the number of transactions made by the sender prior to this one.
        type: optional<string>

  SignMessageResponse:
    properties:
      signature:
        type: string

  AssetChange:
    properties:
      token:
        type: optional<tokens.Token>
      nft:
        type: optional<nfts.Nft>
      amount:
        type: string
      raw_amount:
        type: string
      from:
        type: string
      to:
        type: string

  Simulation:
    properties:
      success:
        type: boolean
      asset_changes:
        type: optional<list<AssetChange>>
      error:
        type: optional<string>

  PreviewResponse:
    properties:
      network:
        type: commons.Network
      from:
        type: string
      to:
        type: string
      contract:
        type: optional<addresses.AddressMetadata>
      function_name:
        type: optional<string>
      arguments:
        type: optional<map<string, unknown>>
      simulation:
        type: optional<Simulation>
